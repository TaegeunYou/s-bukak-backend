name: Deploy to Amazon EC2

# 언제 이 파일의 내용이 실행될 것인지 정의합니다.
# 여기서는 main 브랜치에 코드가 push 되거나 pull_request되었을 때 실행할 것을 말하고 있습니다.
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# 코드의 내용을 이 파일을 실행하여 action을 수행하는 주체(Github Actions에서 사용하는 VM)가 읽을 수 있도록 허용합니다.
permissions:
  contents: read

# 실제 실행될 내용들을 정의합니다.
jobs:
  build:
    runs-on: ubuntu-latest # ubuntu 최신 버전에서 script를 실행

    steps:
      # 지정한 저장소(현재 REPO)에서 코드를 워크플로우 환경으로 가져오도록 하는 github action
      - uses: actions/checkout@v3

      # open jdk 17 버전 환경을 세팅
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: "adopt"

      # Github secrets로부터 데이터를 받아서, 워크 플로우에 파일을 생성
      - name: Make application-prod.yaml
        run: |
          mkdir -p ./src/main/resources
          cd ./src/main/resources
          touch ./application-prod.yaml
          echo "${{ secrets.APPLICATION_PROD_YAML }}" > ./application-prod.yaml
        shell: bash

      # gradle을 통해 소스를 빌드.
      - name: Build with Gradle
        run: |
          chmod +x ./gradlew
          ./gradlew clean build -x test

      # dockerfile을 통해 이미지를 빌드하고, 이를 docker repo로 push 합니다.
      # 이 때 사용되는 ${{ secrets.DOCKER_USERNAME }}/sbukak 가 위에서 만든 도커 repository 입니다.
      - name: Docker build & push to docker repo
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/sbukak .
          docker push ${{ secrets.DOCKER_USERNAME }}/sbukak

      # 기존 컨테이너를 중지하고 제거한 후 새로운 이미지를 풀하고 실행하며, 사용하지 않는 Docker 리소스를 정리합니다.
      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}  # ip
          username: ubuntu
          key: ${{ secrets.PRIVATE_KEY }} # pem key
          script: |
            # Stop and remove the existing container
            docker stop sbukak || true
            docker rm sbukak || true

            # Pull the new image
            docker pull ${{ secrets.DOCKER_USERNAME }}/sbukak:latest

            # Run the new container in the background
            docker run -d --name sbukak -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/sbukak:latest

            # Clean up unused Docker resources
            docker image prune -a -f
